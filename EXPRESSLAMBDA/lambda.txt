EXPRESSÃO LAMBDA

VAR sum age = pets.Sum(pet => pet.Age)

VAR sum age = pets.Sum(pet => pet.Age == 1 ? pet.Age : 0)



public class Car {
    public string Brand { get; set; }
    public string Model { get; set; }
    public float Price { get; set; }
}



 List<Car> cars = new List<Car>
{
    new Car { Brand = "Ferrari", Model = "LaFerrari", Price = 7100000 },
    new Car { Brand = "McLaren", Model = "Elva", Price = 8600000 },
    new Car { Brand = "Bentley", Model = "Mulliner Batur", Price = 10200000 },
    new Car { Brand = "Aston Martin", Model = "Valkyrie", Price = 16300000 },
    new Car { Brand = "BMW", Model = "IX", Price = 670000 },
    new Car { Brand = "Bugatti", Model = "Divo", Price = 26000000 },
    new Car { Brand = "Ferrari", Model = "F8 Spider", Price = 5200000 },
    new Car { Brand = "McLaren", Model = "Speedtail", Price = 40000000 },
    new Car { Brand = "Koenigsegg", Model = "Agera", Price = 7500000 },
    new Car { Brand = "Devel", Model = "Sixteen", Price = 79000020 }
};


========================================================================================================================
Operação de Projeção

-podemos utilizar o método Select() para filtrar diretamente em uma coleção.


var carsName = cars.Select(car => car.Brand + " " + car.Model);

foreach(var carName in carsName)
{
    Console.WriteLine(carName);
}


========================================================================================================================
Operação de Filtragem


Tal como utilizamos o where na consulta LINQ

temos o método Where() nas expressões lambda.

Este método gera uma nova coleção baseada na coleção original mas apenas com os itens cuja condição do método Where() seja verdadeira.


var carsFerrari = cars.Where(car => car.Brand == "Ferrari");

foreach(var carFerrari in carsFerrari)
{
    Console.WriteLine($"{carFerrari.Brand} {carFerrari.Model} - Preço: R$ {carFerrari.Price}");
}

RETORNO 


Ferrari LaFerrari - Preço: R$ 7100000
Ferrari F8 Spider - Preço: R$ 5200000


========================================================================================================================
Operação de Ordenação

Para ordenar as coleções de acordo com os valores ou de acordo com um atributo de uma coleção de objetos, a linguagem disponibiliza os métodos:

 OrderBy() para ordenar de forma crescente
 OrderByDescending() para ordenar de forma decrescente.


var carsOrderedByPrice = cars.OrderBy(car => car.Price);

foreach(var carOrderedByPrice in carsOrderedByPrice)
{
    Console.WriteLine($"{carOrderedByPrice.Brand} {carOrderedByPrice.Model} - Preço: R$ {carOrderedByPrice.Price}");
}


========================================================================================================================
Operação de Quantificação

As operações de quantificação são operações que retornam respostas booleanas quanto à quantidade de itens de uma coleção que
 atendem a uma certa condição.

All() => O método All() retornará true se todos os itens de uma coleção atenderem a uma certa condição e false caso algum dos itens não atenda a mesma.

Any() =>  retornará true se algum dos itens de uma coleção atenderem a uma certa condição e false caso nenhum dos itens atenda a mesma.

EXEMPLO:

bool allCarsOver15M = cars.All(car => car.Price > 15000000);
Console.WriteLine($"Todos os carros custam mais de 15M? {allCarsOver15M}");

bool anyCarsOver15M = cars.Any(car => car.Price > 15000000);
Console.WriteLine($"Algum carro custa mais de 15M? {anyCarsOver15M}");


========================================================================================================================
Operações de Agregação

As operações de agregação em expressões lambda são as operações que apresentam um retorno baseado na agregação dos valores de todos os itens da coleção.

Min()
Max()
Average()

EXEMPLO:

var minPrice = cars.Min(car => car.Price);
Console.WriteLine($"O carro mais barato custa: R$ {minPrice}");

var maxPrice = cars.Max(car => car.Price);
Console.WriteLine($"O carro mais caro custa: R$ {maxPrice}");

var avgPrice = cars.Average(car => car.Price);
Console.WriteLine($"Os carros custam em média: R$ {avgPrice}");

========================================================================================================================
Operação de agrupamento

A operação de agrupamento, tal como nas consultas LINQ, indicam um atributo utilizado para agrupar os valores de uma coleção,
criando uma lista ou coleção agrupada que possui um atributo Key que representa o valor do atributo original a ser agrupado.

A partir desses itens agrupados, todos os outros itens da coleção original fazem parte desse agrupamento e podem ser acessados por um laço de repetição aninhados.

EXEMPLO:


var carsByBrand = cars.GroupBy(car => car.Brand);

foreach (var carByBrand in carsByBrand)
{
    Console.WriteLine(carByBrand.Key);
    foreach (var car in carByBrand)
    {
        Console.WriteLine($"\t {car.Model} - Preço: {car.Price}");
    }
}


