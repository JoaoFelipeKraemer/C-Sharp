Os comandos que s√£o necess√°rios para a ferramenta estar dispon√≠vel em uma aplica√ß√£o Web utilizando .NET s√£o as instru√ß√µes:

builder.Services.AddSwaggerGen();

app.UseSwagger();

app.UseSwaggerUI();

*dotnet new webapi

**O que √© Swagger UI?‚Äù ü§î

 UI vem de User Interface, sendo uma interface web gerada pelo Swagger para facilitar a manipula√ß√£o e intera√ß√£o com a API e sua documenta√ß√£o.
=====================================================================================
**Como acessar a documenta√ß√£o gerada pelo Swagger?

rota padr√£o definida √© /swagger.
Ou seja, utilizando o modo debug ao executar a aplica√ß√£o, podemos digitar esse diret√≥rio na URL ap√≥s o host

https://localhost:7005/swagger

=====================================================================================
**Adicionando informa√ß√µes na documenta√ß√£o

fun√ß√£o AddSwaggerGen() com a SwaggerDoc(), onde a fun√ß√£o SwaggerDoc() pertence √† classe SwaggerGenOptions
 e necessita de dois par√¢metros a serem passados: o primeiro se refere ao nome da documenta√ß√£o,
 e o outro √© um objeto do tipo OpenApiInfo, que possui propriedades como t√≠tulo da API, descri√ß√£o e at√© mesmo a vers√£o.
 Vamos inserir tais configura√ß√µes em nosso arquivo Program.cs.

=====================================================================================
**Utilizando Swagger para adicionar coment√°rios em a√ß√µes

Para incluir coment√°rios quando estamos lidando com uma aplica√ß√£o .NET 
e construindo uma documenta√ß√£o Swagger, podemos configur√°-la da seguinte forma:

Nas configura√ß√µes do programa em Program.cs, onde √© definida a fun√ß√£o AddSwaggerGen(), definir as especifica√ß√µes abaixo:

builder.Services.AddSwaggerGen(options =>
{
    string file = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    string path = Path.Combine(AppContext.BaseDirectory, file);
    options.IncludeXmlComments(path);
});

Dessa forma, os arquivos lidos ser√£o do tipo xml, em que precisamos incluir configura√ß√µes no csproj do projeto 
para que seja poss√≠vel gerar os arquivos definidos nas especifica√ß√µes citadas. 
Para isso, vamos adicionar as seguintes configura√ß√µes no arquivo de csproj.

<PropertyGroup>
  <GenerateDocumentationFile>true</GenerateDocumentationFile>
  <NoWarn>$(NoWarn);1591</NoWarn>
</PropertyGroup>